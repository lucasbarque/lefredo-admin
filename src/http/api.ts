/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Le Fredo API
 * Confira todas as rotas disponíveis
 * OpenAPI spec version: 1.0
 */
export interface AuthDTO { [key: string]: unknown }

export interface ChangePasswordDTO { [key: string]: unknown }

export interface CreateUserDTO {
  name: string;
}

export interface CreateMenuDTO { [key: string]: unknown }

export interface UpdateMenuDTO { [key: string]: unknown }

export interface CreateDishDTO { [key: string]: unknown }

export interface CreateResturantDTO { [key: string]: unknown }

export interface CreateSectionDTO { [key: string]: unknown }

export interface UploadFilesInput { [key: string]: unknown }

export type MenusControllerGetByRestaurantParams = {
restaurantId: string;
};

export type DishesControllerListParams = {
sectionId: string;
};

export type RestaurantsControllerListParams = {
menuId: string;
restaurantId: string;
};

export type SectionsControllerListParams = {
menuId: string;
};



/**
 * @summary Login
 */
export const getLoginUserUrl = () => {


  return `http://localhost:3333/auth/login`
}

export const loginUser = async (authDTO: AuthDTO, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getLoginUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      authDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Get Profile
 */
export const getGetProfileUrl = () => {


  return `http://localhost:3333/auth/me`
}

export const getProfile = async ( options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getGetProfileUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Change password
 */
export const getChangePasswordUrl = () => {


  return `http://localhost:3333/auth/change-password`
}

export const changePassword = async (changePasswordDTO: ChangePasswordDTO, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getChangePasswordUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      changePasswordDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Get all users
 */
export const getGetAllUsersUrl = () => {


  return `http://localhost:3333/users`
}

export const getAllUsers = async ( options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getGetAllUsersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



/**
 * @summary Create user
 */
export const getCreateUserUrl = () => {


  return `http://localhost:3333/users`
}

export const createUser = async (createUserDTO: CreateUserDTO, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getCreateUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createUserDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getMenusControllerGetByRestaurantUrl = (params: MenusControllerGetByRestaurantParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://localhost:3333/menus?${normalizedParams.toString()}` : `http://localhost:3333/menus`
}

export const menusControllerGetByRestaurant = async (params: MenusControllerGetByRestaurantParams, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getMenusControllerGetByRestaurantUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getMenusControllerCreateUrl = () => {


  return `http://localhost:3333/menus`
}

export const menusControllerCreate = async (createMenuDTO: CreateMenuDTO, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getMenusControllerCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createMenuDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getMenusControllerGetByIdUrl = (id: string,) => {


  return `http://localhost:3333/menus/${id}`
}

export const menusControllerGetById = async (id: string, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getMenusControllerGetByIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getMenusControllerUpdateUrl = (id: string,) => {


  return `http://localhost:3333/menus/${id}`
}

export const menusControllerUpdate = async (id: string,
    updateMenuDTO: UpdateMenuDTO, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getMenusControllerUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateMenuDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getDishesControllerGetByIdUrl = (id: string,) => {


  return `http://localhost:3333/dishes/${id}`
}

export const dishesControllerGetById = async (id: string, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getDishesControllerGetByIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getDishesControllerDeleteUrl = (id: string,) => {


  return `http://localhost:3333/dishes/${id}`
}

export const dishesControllerDelete = async (id: string, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getDishesControllerDeleteUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getDishesControllerListUrl = (params: DishesControllerListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://localhost:3333/dishes?${normalizedParams.toString()}` : `http://localhost:3333/dishes`
}

export const dishesControllerList = async (params: DishesControllerListParams, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getDishesControllerListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getDishesControllerCreateUrl = () => {


  return `http://localhost:3333/dishes`
}

export const dishesControllerCreate = async (createDishDTO: CreateDishDTO, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getDishesControllerCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createDishDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getRestaurantsControllerListUrl = (params: RestaurantsControllerListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://localhost:3333/restaurants?${normalizedParams.toString()}` : `http://localhost:3333/restaurants`
}

export const restaurantsControllerList = async (params: RestaurantsControllerListParams, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getRestaurantsControllerListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getRestaurantsControllerCreateUrl = () => {


  return `http://localhost:3333/restaurants`
}

export const restaurantsControllerCreate = async (createResturantDTO: CreateResturantDTO, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getRestaurantsControllerCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createResturantDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getRestaurantsControllerGetByIdUrl = (id: string,) => {


  return `http://localhost:3333/restaurants/${id}`
}

export const restaurantsControllerGetById = async (id: string, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getRestaurantsControllerGetByIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getSectionsControllerListUrl = (params: SectionsControllerListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://localhost:3333/sections?${normalizedParams.toString()}` : `http://localhost:3333/sections`
}

export const sectionsControllerList = async (params: SectionsControllerListParams, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getSectionsControllerListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getSectionsControllerCreateUrl = () => {


  return `http://localhost:3333/sections`
}

export const sectionsControllerCreate = async (createSectionDTO: CreateSectionDTO, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getSectionsControllerCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createSectionDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getSectionsControllerGetByIdUrl = (id: string,) => {


  return `http://localhost:3333/sections/${id}`
}

export const sectionsControllerGetById = async (id: string, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getSectionsControllerGetByIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getMediasControllerUploadFilesUrl = () => {


  return `http://localhost:3333/medias/upload-files`
}

export const mediasControllerUploadFiles = async (uploadFilesInput: UploadFilesInput, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getMediasControllerUploadFilesUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      uploadFilesInput,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



export const getMediasControllerUploadMediaByUrlUrl = () => {


  return `http://localhost:3333/medias/upload-url`
}

export const mediasControllerUploadMediaByUrl = async (uploadFilesInput: UploadFilesInput, options?: RequestInit): Promise<void> => {
  
  const res = await fetch(getMediasControllerUploadMediaByUrlUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      uploadFilesInput,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: void = body ? JSON.parse(body) : {}

  return data
}



