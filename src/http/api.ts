/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Alimentados API
 * Confira todas as rotas disponíveis
 * OpenAPI spec version: 1.0
 */
export type GetUserByRestaurantIdRole = typeof GetUserByRestaurantIdRole[keyof typeof GetUserByRestaurantIdRole];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUserByRestaurantIdRole = {
  ADMIN: 'ADMIN',
} as const;

export interface GetUserByRestaurantId {
  id: string;
  name: string;
  email: string;
  clerkId: string;
  active: boolean;
  role: GetUserByRestaurantIdRole;
  onboardingFinished: boolean;
  restaurantId: string;
}

export interface CreateUserDTO {
  name: string;
}

export interface CreateMenuDTO { [key: string]: unknown }

export interface UpdateMenuDTO { [key: string]: unknown }

export interface Section {
  description: string;
}

export interface DishExtrasDTO {
  id: string;
  title: string;
  price: number;
}

export interface DishFlavorsMedias {
  id: string;
  title: string;
  url: string;
}

export interface DishFlavorsDTO {
  id: string;
  title: string;
  label: string;
  description: string;
  dishId: string;
  dishFlavorsMedias: DishFlavorsMedias[];
}

export interface DishMediasDTO {
  id: string;
  title: string;
  url: string;
}

export type DishSpecKey = typeof DishSpecKey[keyof typeof DishSpecKey];


// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DishSpecKey = {
  cold: 'cold',
  hot: 'hot',
  vegan: 'vegan',
  highlited: 'highlited',
} as const;

export interface DishSpec {
  id: string;
  title: string;
  key: DishSpecKey;
}

export interface DishSpecsDTO {
  dishSpecsId: string;
  dishId: string;
  DishSpecs: DishSpec;
}

export interface GetDishDTO {
  id: string;
  title: string;
  description: string;
  price: number;
  portion: string;
  prepTime: string;
  section: Section;
  dishExtras: DishExtrasDTO[];
  dishFlavors: DishFlavorsDTO[];
  dishMedias: DishMediasDTO[];
  dishSpecs: DishSpecsDTO[];
}

export interface GetDishesDTO {
  id: string;
  title: string;
  price: number;
  portion: string;
  prepTime: string;
  dishSpecs: DishSpecsDTO[];
  dishMedias: DishMediasDTO[];
}

export interface RequestCreateDishDTO {
  title: string;
  portion: string;
  price: string;
  /** @nullable */
  prepTime: string | null;
  flagged: string;
  /** @nullable */
  description: string | null;
  sectionId: string;
}

export interface ResponseCreateDishDTO {
  id: string;
}

export interface RequestChangePriceDTO {
  price: number;
}

export interface GetRestaurantBySlugDTO {
  id: string;
  name: string;
  welcomeMessage: string;
  logo: string;
  slug: string;
  Menu: string[];
}

export interface GetRestaurantByIdDTO {
  id: string;
  name: string;
  welcomeMessage: string;
  logo: string;
}

export interface UpdateResturantDTO {
  name: string;
  welcomeMessage: string;
}

export interface ChangeLogoDTO {
  file: string;
}

export interface ChangeLogoResponseDTO {
  logo: string;
}

export interface GetRestaurantIsFirstCategoryDTO {
  isFirstCategory: boolean;
}

export interface CreateResturantDTO { [key: string]: unknown }

export interface GetSectionsDTO {
  id: string;
  title: string;
  description: string;
  slug: string;
}

export interface Dish {
  id: string;
  title: string;
  description: string;
  price: number;
  portion: string;
  /** @nullable */
  prepTime: string | null;
  dishMedias: DishMediasDTO[];
  isActive: boolean;
}

export interface ResponseGetSectionsWithItemsDTO {
  id: string;
  title: string;
  /** @nullable */
  description: string | null;
  slug: string;
  Dish: Dish[];
  isActive: boolean;
}

export interface ResponseGetSectionByIdDTO {
  id: string;
  title: string;
  /** @nullable */
  description: string | null;
  slug: string;
  isActive: boolean;
}

export interface RequestCreateSectionDTO {
  title: string;
  menuId: string;
  /** @nullable */
  description: string | null;
}

export interface RequestUpdateSectionDTO {
  title: string;
  /** @nullable */
  description: string | null;
}

export type MenusControllerGetByRestaurantParams = {
restaurantId: string;
};

export type GetDishesBySectionIdParams = {
sectionId: string;
};

export type RestaurantsControllerListParams = {
menuId: string;
restaurantId: string;
};

export type GetSectionsParams = {
menuId: string;
};

export type GetSectionsWithItemsParams = {
menuId: string;
};



/**
 * @summary Get user by restaurantId
 */
export type getUserByRestaurantIdResponse = {
  data: GetUserByRestaurantId;
  status: number;
  headers: Headers;
}

export const getGetUserByRestaurantIdUrl = (restaurantId: string,) => {


  return `http://localhost:3333/users/restaurant/${restaurantId}`
}

export const getUserByRestaurantId = async (restaurantId: string, options?: RequestInit): Promise<getUserByRestaurantIdResponse> => {
  
  const res = await fetch(getGetUserByRestaurantIdUrl(restaurantId),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getUserByRestaurantIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getUserByRestaurantIdResponse
}



/**
 * @summary Change onboarding status
 */
export type changeOnboardingStatusResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getChangeOnboardingStatusUrl = (id: string,) => {


  return `http://localhost:3333/users/change-onboarding-status/${id}`
}

export const changeOnboardingStatus = async (id: string, options?: RequestInit): Promise<changeOnboardingStatusResponse> => {
  
  const res = await fetch(getChangeOnboardingStatusUrl(id),
  {      
    ...options,
    method: 'PATCH'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: changeOnboardingStatusResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as changeOnboardingStatusResponse
}



/**
 * @summary Get all users
 */
export type getAllUsersResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getGetAllUsersUrl = () => {


  return `http://localhost:3333/users`
}

export const getAllUsers = async ( options?: RequestInit): Promise<getAllUsersResponse> => {
  
  const res = await fetch(getGetAllUsersUrl(),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getAllUsersResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getAllUsersResponse
}



/**
 * @summary Create user
 */
export type createUserResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getCreateUserUrl = () => {


  return `http://localhost:3333/users`
}

export const createUser = async (createUserDTO: CreateUserDTO, options?: RequestInit): Promise<createUserResponse> => {
  
  const res = await fetch(getCreateUserUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createUserDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: createUserResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as createUserResponse
}



export type menusControllerGetByRestaurantResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getMenusControllerGetByRestaurantUrl = (params: MenusControllerGetByRestaurantParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://localhost:3333/menus?${normalizedParams.toString()}` : `http://localhost:3333/menus`
}

export const menusControllerGetByRestaurant = async (params: MenusControllerGetByRestaurantParams, options?: RequestInit): Promise<menusControllerGetByRestaurantResponse> => {
  
  const res = await fetch(getMenusControllerGetByRestaurantUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: menusControllerGetByRestaurantResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as menusControllerGetByRestaurantResponse
}



export type menusControllerCreateResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getMenusControllerCreateUrl = () => {


  return `http://localhost:3333/menus`
}

export const menusControllerCreate = async (createMenuDTO: CreateMenuDTO, options?: RequestInit): Promise<menusControllerCreateResponse> => {
  
  const res = await fetch(getMenusControllerCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createMenuDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: menusControllerCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as menusControllerCreateResponse
}



export type menusControllerGetByIdResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getMenusControllerGetByIdUrl = (id: string,) => {


  return `http://localhost:3333/menus/${id}`
}

export const menusControllerGetById = async (id: string, options?: RequestInit): Promise<menusControllerGetByIdResponse> => {
  
  const res = await fetch(getMenusControllerGetByIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: menusControllerGetByIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as menusControllerGetByIdResponse
}



export type menusControllerUpdateResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getMenusControllerUpdateUrl = (id: string,) => {


  return `http://localhost:3333/menus/${id}`
}

export const menusControllerUpdate = async (id: string,
    updateMenuDTO: UpdateMenuDTO, options?: RequestInit): Promise<menusControllerUpdateResponse> => {
  
  const res = await fetch(getMenusControllerUpdateUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateMenuDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: menusControllerUpdateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as menusControllerUpdateResponse
}



/**
 * @summary Get Dish By Id
 */
export type getDishByIdResponse = {
  data: GetDishDTO;
  status: number;
  headers: Headers;
}

export const getGetDishByIdUrl = (id: string,) => {


  return `http://localhost:3333/dishes/${id}`
}

export const getDishById = async (id: string, options?: RequestInit): Promise<getDishByIdResponse> => {
  
  const res = await fetch(getGetDishByIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getDishByIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getDishByIdResponse
}



export type dishesControllerDeleteResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getDishesControllerDeleteUrl = (id: string,) => {


  return `http://localhost:3333/dishes/${id}`
}

export const dishesControllerDelete = async (id: string, options?: RequestInit): Promise<dishesControllerDeleteResponse> => {
  
  const res = await fetch(getDishesControllerDeleteUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: dishesControllerDeleteResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as dishesControllerDeleteResponse
}



/**
 * @summary Get Dishes
 */
export type getDishesBySectionIdResponse = {
  data: GetDishesDTO[];
  status: number;
  headers: Headers;
}

export const getGetDishesBySectionIdUrl = (params: GetDishesBySectionIdParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://localhost:3333/dishes?${normalizedParams.toString()}` : `http://localhost:3333/dishes`
}

export const getDishesBySectionId = async (params: GetDishesBySectionIdParams, options?: RequestInit): Promise<getDishesBySectionIdResponse> => {
  
  const res = await fetch(getGetDishesBySectionIdUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getDishesBySectionIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getDishesBySectionIdResponse
}



/**
 * @summary Create Dish
 */
export type createDishResponse = {
  data: ResponseCreateDishDTO;
  status: number;
  headers: Headers;
}

export const getCreateDishUrl = () => {


  return `http://localhost:3333/dishes`
}

export const createDish = async (requestCreateDishDTO: RequestCreateDishDTO, options?: RequestInit): Promise<createDishResponse> => {
  
  const res = await fetch(getCreateDishUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      requestCreateDishDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: createDishResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as createDishResponse
}



/**
 * @summary Get Dishes
 */
export type getDishesBySlugResponse = {
  data: GetDishesDTO[];
  status: number;
  headers: Headers;
}

export const getGetDishesBySlugUrl = (slug: string,) => {


  return `http://localhost:3333/dishes/slug/${slug}`
}

export const getDishesBySlug = async (slug: string, options?: RequestInit): Promise<getDishesBySlugResponse> => {
  
  const res = await fetch(getGetDishesBySlugUrl(slug),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getDishesBySlugResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getDishesBySlugResponse
}



/**
 * @summary Toggle Section
 */
export type toggleDishResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getToggleDishUrl = (id: string,) => {


  return `http://localhost:3333/dishes/toggle/${id}`
}

export const toggleDish = async (id: string, options?: RequestInit): Promise<toggleDishResponse> => {
  
  const res = await fetch(getToggleDishUrl(id),
  {      
    ...options,
    method: 'PATCH'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: toggleDishResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as toggleDishResponse
}



/**
 * @summary Change Price
 */
export type changePriceResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getChangePriceUrl = (id: string,) => {


  return `http://localhost:3333/dishes/change-price/${id}`
}

export const changePrice = async (id: string,
    requestChangePriceDTO: RequestChangePriceDTO, options?: RequestInit): Promise<changePriceResponse> => {
  
  const res = await fetch(getChangePriceUrl(id),
  {      
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      requestChangePriceDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: changePriceResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as changePriceResponse
}



export type restaurantsControllerListResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getRestaurantsControllerListUrl = (params: RestaurantsControllerListParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://localhost:3333/restaurants?${normalizedParams.toString()}` : `http://localhost:3333/restaurants`
}

export const restaurantsControllerList = async (params: RestaurantsControllerListParams, options?: RequestInit): Promise<restaurantsControllerListResponse> => {
  
  const res = await fetch(getRestaurantsControllerListUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: restaurantsControllerListResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as restaurantsControllerListResponse
}



export type restaurantsControllerCreateResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getRestaurantsControllerCreateUrl = () => {


  return `http://localhost:3333/restaurants`
}

export const restaurantsControllerCreate = async (createResturantDTO: CreateResturantDTO, options?: RequestInit): Promise<restaurantsControllerCreateResponse> => {
  
  const res = await fetch(getRestaurantsControllerCreateUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      createResturantDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: restaurantsControllerCreateResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as restaurantsControllerCreateResponse
}



/**
 * @summary Get Restaurant By Slug
 */
export type getRestaurantBySlugResponse = {
  data: GetRestaurantBySlugDTO;
  status: number;
  headers: Headers;
}

export const getGetRestaurantBySlugUrl = (slug: string,) => {


  return `http://localhost:3333/restaurants/slug/${slug}`
}

export const getRestaurantBySlug = async (slug: string, options?: RequestInit): Promise<getRestaurantBySlugResponse> => {
  
  const res = await fetch(getGetRestaurantBySlugUrl(slug),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getRestaurantBySlugResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getRestaurantBySlugResponse
}



/**
 * @summary Get Restaurant By Id
 */
export type getRestaurantByIdResponse = {
  data: GetRestaurantByIdDTO;
  status: number;
  headers: Headers;
}

export const getGetRestaurantByIdUrl = (id: string,) => {


  return `http://localhost:3333/restaurants/${id}`
}

export const getRestaurantById = async (id: string, options?: RequestInit): Promise<getRestaurantByIdResponse> => {
  
  const res = await fetch(getGetRestaurantByIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getRestaurantByIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getRestaurantByIdResponse
}



/**
 * @summary Update Restaurant
 */
export type updateRestaurantResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getUpdateRestaurantUrl = (id: string,) => {


  return `http://localhost:3333/restaurants/${id}`
}

export const updateRestaurant = async (id: string,
    updateResturantDTO: UpdateResturantDTO, options?: RequestInit): Promise<updateRestaurantResponse> => {
  
  const res = await fetch(getUpdateRestaurantUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      updateResturantDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: updateRestaurantResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as updateRestaurantResponse
}



/**
 * @summary Change Logo
 */
export type changeLogoRestaurantResponse = {
  data: ChangeLogoResponseDTO;
  status: number;
  headers: Headers;
}

export const getChangeLogoRestaurantUrl = (id: string,) => {


  return `http://localhost:3333/restaurants/${id}/change-logo`
}

export const changeLogoRestaurant = async (id: string,
    changeLogoDTO: ChangeLogoDTO, options?: RequestInit): Promise<changeLogoRestaurantResponse> => {
    const formData = new FormData();
formData.append('file', changeLogoDTO.file)

  const res = await fetch(getChangeLogoRestaurantUrl(id),
  {      
    ...options,
    method: 'PATCH'
    ,
    body: 
      formData,
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: changeLogoRestaurantResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as changeLogoRestaurantResponse
}



/**
 * @summary Delete Logo
 */
export type deleteLogoRestaurantResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getDeleteLogoRestaurantUrl = (id: string,) => {


  return `http://localhost:3333/restaurants/${id}/delete-logo`
}

export const deleteLogoRestaurant = async (id: string, options?: RequestInit): Promise<deleteLogoRestaurantResponse> => {
  
  const res = await fetch(getDeleteLogoRestaurantUrl(id),
  {      
    ...options,
    method: 'PATCH'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: deleteLogoRestaurantResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as deleteLogoRestaurantResponse
}



/**
 * @summary Get restaurant is first category information
 */
export type getRestaurantIsFirstCategoryResponse = {
  data: GetRestaurantIsFirstCategoryDTO;
  status: number;
  headers: Headers;
}

export const getGetRestaurantIsFirstCategoryUrl = (id: string,) => {


  return `http://localhost:3333/restaurants/is-first-category/${id}`
}

export const getRestaurantIsFirstCategory = async (id: string, options?: RequestInit): Promise<getRestaurantIsFirstCategoryResponse> => {
  
  const res = await fetch(getGetRestaurantIsFirstCategoryUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getRestaurantIsFirstCategoryResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getRestaurantIsFirstCategoryResponse
}



/**
 * @summary Get Sections
 */
export type getSectionsResponse = {
  data: GetSectionsDTO[];
  status: number;
  headers: Headers;
}

export const getGetSectionsUrl = (params: GetSectionsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://localhost:3333/sections?${normalizedParams.toString()}` : `http://localhost:3333/sections`
}

export const getSections = async (params: GetSectionsParams, options?: RequestInit): Promise<getSectionsResponse> => {
  
  const res = await fetch(getGetSectionsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSectionsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getSectionsResponse
}



/**
 * @summary Create Section
 */
export type createSectionResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getCreateSectionUrl = () => {


  return `http://localhost:3333/sections`
}

export const createSection = async (requestCreateSectionDTO: RequestCreateSectionDTO, options?: RequestInit): Promise<createSectionResponse> => {
  
  const res = await fetch(getCreateSectionUrl(),
  {      
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      requestCreateSectionDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: createSectionResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as createSectionResponse
}



/**
 * @summary Get Sections with items
 */
export type getSectionsWithItemsResponse = {
  data: ResponseGetSectionsWithItemsDTO[];
  status: number;
  headers: Headers;
}

export const getGetSectionsWithItemsUrl = (params: GetSectionsWithItemsParams,) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString())
    }
  });

  return normalizedParams.size ? `http://localhost:3333/sections/get-with-items?${normalizedParams.toString()}` : `http://localhost:3333/sections/get-with-items`
}

export const getSectionsWithItems = async (params: GetSectionsWithItemsParams, options?: RequestInit): Promise<getSectionsWithItemsResponse> => {
  
  const res = await fetch(getGetSectionsWithItemsUrl(params),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSectionsWithItemsResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getSectionsWithItemsResponse
}



/**
 * @summary Get Section By Id
 */
export type getSectionByIdResponse = {
  data: ResponseGetSectionByIdDTO;
  status: number;
  headers: Headers;
}

export const getGetSectionByIdUrl = (id: string,) => {


  return `http://localhost:3333/sections/${id}`
}

export const getSectionById = async (id: string, options?: RequestInit): Promise<getSectionByIdResponse> => {
  
  const res = await fetch(getGetSectionByIdUrl(id),
  {      
    ...options,
    method: 'GET'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: getSectionByIdResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as getSectionByIdResponse
}



/**
 * @summary Delete Section
 */
export type deleteSectionResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getDeleteSectionUrl = (id: string,) => {


  return `http://localhost:3333/sections/${id}`
}

export const deleteSection = async (id: string, options?: RequestInit): Promise<deleteSectionResponse> => {
  
  const res = await fetch(getDeleteSectionUrl(id),
  {      
    ...options,
    method: 'DELETE'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: deleteSectionResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as deleteSectionResponse
}



/**
 * @summary Update Section
 */
export type updateSectionResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getUpdateSectionUrl = (id: string,) => {


  return `http://localhost:3333/sections/${id}`
}

export const updateSection = async (id: string,
    requestUpdateSectionDTO: RequestUpdateSectionDTO, options?: RequestInit): Promise<updateSectionResponse> => {
  
  const res = await fetch(getUpdateSectionUrl(id),
  {      
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(
      requestUpdateSectionDTO,)
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: updateSectionResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as updateSectionResponse
}



/**
 * @summary Toggle Section
 */
export type toggleSectionResponse = {
  data: void;
  status: number;
  headers: Headers;
}

export const getToggleSectionUrl = (id: string,) => {


  return `http://localhost:3333/sections/toggle/${id}`
}

export const toggleSection = async (id: string, options?: RequestInit): Promise<toggleSectionResponse> => {
  
  const res = await fetch(getToggleSectionUrl(id),
  {      
    ...options,
    method: 'PATCH'
    
    
  }
)

  const body = [204, 205, 304].includes(res.status) ? null : await res.text()
  const data: toggleSectionResponse['data'] = body ? JSON.parse(body) : {}

  return { data, status: res.status, headers: res.headers } as toggleSectionResponse
}



